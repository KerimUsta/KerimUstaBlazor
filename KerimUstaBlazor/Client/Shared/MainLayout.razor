@inherits LayoutComponentBase

@inject HttpClient httpClient

@using KerimUstaBlazor.Shared;
@using System.Net.Http.Json
@using ustakerimhost.Models;

<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container">
        <!-- Sipariş numarası filtreleme için input alanı -->
        <label for="siparisNoInput">Sipariş NO:</label>
        <input type="text" id="siparisNoInput" @bind="siparisNoFilter" class="form-control mr-2">
        <label for="durumlarInput">Durum:</label>
        <select @bind="selectedDurum" class="form-control">
            <option value="Tümü">Tümü</option>
            @foreach (var item in durumlar)
            {
                <option value="@item.DURUM">@item.DURUM</option>
            }
        </select>
        <label for="baslangicTarihInput">Başlangıç Tarihi:</label>
        <input type="date" id="baslangicTarihInput" @bind="baslangicTarih" class="form-control mr-2">

        <label for="bitisTarihInput">Bitiş Tarihi:</label>
        <input type="date" id="bitisTarihInput" @bind="bitisTarih" class="form-control mr-2">
        <label for="musteriNoInput">Müşteri Adı:</label>
        <input type="text" id="musteriNoInput" @bind="musteriFilter" class="form-control mr-2">
        <button @onclick="Filtrele" class="btn btn-primary">Filtrele</button>
    </div>
</nav>
<div class="container mt-4">
    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                <th>Sipariş No</th>
                <th>Yayın</th>
                <th>Redüktör Kod</th>
                <th>Redüktör Açıklama</th>
                <th>Adet</th>
                <th>Fiyat</th>
                <th>Toplam Sipariş Tutarı</th>
                <th>Teslim Tarihi</th>
                <th>Durum</th>
                <th>Gecikme</th>
                
                <th>Siparişi Açan</th>
                <th>Müşteri Adı</th>
                <th>Onay</th>
                <th>Onaylama İşlemi</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in veriListesi)
            {
                <tr>
                    <td>@item.SIPARIS_NO</td>
                    <td>@item.YAYIN</td>
                    <td>@item.REDUKTOR_KOD</td>
                    <td>@item.REDUKTOR_ACIKLAMA</td>
                    <td>@item.ADET</td>
                    <td>@item.FIYAT</td>
                    <td>@item.TOPLAM_SIPARIS_TUTAR</td>
                    <td>@item.TESLIM_TARIHI.ToString("dd-MM-yyyy")</td>
                    <td>@item.DURUM</td>
                    <td>@item.GECIKME</td>
                    <td>@item.SIPARISI_ACAN</td>
                    <td>@item.MUSTERI_AD</td>
                    <td>@item.ONAY</td>
                    <td>
                        <button class="btn btn-success" @onclick="() => Onayla(item)">Onayla</button><br>
                        <button class="btn btn-danger" @onclick="() => Onaysiz(item)">Onaysız</button>
                    </td>
                    
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private List<VeriModel> veriListesi;
    private List<ComboDoldur> durumlar;
    private string selectedDurum = "Tümü";
    private string siparisNoFilter = "";
    private string musteriFilter = "";
    private DateTime? baslangicTarih;
    private DateTime? bitisTarih;
    private List<VeriModel> originalVeriListesi;

    protected override async Task OnInitializedAsync()
    {
        originalVeriListesi = await httpClient.GetFromJsonAsync<List<VeriModel>>("/WeatherForecast/Listele");

        veriListesi = await httpClient.GetFromJsonAsync<List<VeriModel>>("/WeatherForecast/Listele");
        durumlar = await httpClient.GetFromJsonAsync<List<ComboDoldur>>("/WeatherForecast/ComboDoldur");
    }

    private async Task Filtrele()
    {
        veriListesi = new List<VeriModel>(originalVeriListesi);

        if (selectedDurum != "Tümü")
        {
            veriListesi = veriListesi.Where(item => item.DURUM == selectedDurum).ToList();
        }
        if (!string.IsNullOrEmpty(siparisNoFilter))
        {
            siparisNoFilter = siparisNoFilter.ToUpper();
            veriListesi = veriListesi.Where(item => item.SIPARIS_NO.Contains(siparisNoFilter)).ToList();
        }
        if (baslangicTarih != null && bitisTarih != null)
        {
            veriListesi = veriListesi.Where(item => item.TESLIM_TARIHI >= baslangicTarih && item.TESLIM_TARIHI <= bitisTarih).ToList();
        }
        if (!string.IsNullOrEmpty(musteriFilter))
        {
            veriListesi = veriListesi.Where(item => item.MUSTERI_AD.Contains(musteriFilter)).ToList();
        }
        if (veriListesi.Count == 0)
        {
            veriListesi.Clear();
            veriListesi.Add(new VeriModel { SIPARIS_NO = "Değer bulunamadı" });
        }
    }

    private async Task Onayla(VeriModel item)
    {
        try
        {
            Onayla onay = new Onayla
                {
                    sip = item.SIPARIS_NO,
                    yay = item.YAYIN,
                    reduk = item.REDUKTOR_KOD,
                    value = "Onaysız" // İstediğiniz onay değerini burada belirtin
                };

            var response = await httpClient.PostAsJsonAsync("/WeatherForecast/Onayla", onay);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<Responen>();
                // Başarılı yanıtı işleyin (örneğin, bir bildirim gösterin)
            }
            else
            {
                // Hata durumunu işleyin (örneğin, bir hata mesajı gösterin)
            }
            await RefreshData();
        }
        catch (Exception ex)
        {
            // İstisnaları işleyin (örneğin, bir hata mesajı gösterin)
        }
    }


    private async void Onaysiz(VeriModel item)
    {
        try
        {
            Onayla onay = new Onayla
                {
                    sip = item.SIPARIS_NO,
                    yay = item.YAYIN,
                    reduk = item.REDUKTOR_KOD,
                    value = "Onaylı" // İstediğiniz onay değerini burada belirtin
                };

            var response = await httpClient.PostAsJsonAsync("/WeatherForecast/Onayla", onay);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<Responen>();
                // Başarılı yanıtı işleyin (örneğin, bir bildirim gösterin)
            }
            else
            {
                // Hata durumunu işleyin (örneğin, bir hata mesajı gösterin)
            }
            await RefreshData();
        }
        catch (Exception ex)
        {
            // İstisnaları işleyin (örneğin, bir hata mesajı gösterin)
        }
        // Veri öğesini onaysız bırakma işlemi burada gerçekleştirilir
        // Örneğin, item.ONAY değerini güncellemek için bir işlem yapabilirsiniz
    }
    private async Task RefreshData()
    {
        // Verileri yeniden yükle
        originalVeriListesi = await httpClient.GetFromJsonAsync<List<VeriModel>>("/WeatherForecast/Listele");
        veriListesi = new List<VeriModel>(originalVeriListesi);
        StateHasChanged(); // Sayfa yeniden yüklendiğinde güncel verileri göstermek için bu yöntemi kullanın
    }
}
